The ARM documentation describes linker feedback here:

http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0474c/CHDFJGBE.html

Summed up by "Linker feedback is a collaboration between the compiler and
linker that can increase the amount of unused code that can be removed
from an ELF image".  In a nut-shell: it is information generated by the
link stage of a build that might usefully influence the compile stage in
subsequent builds.

Raptor supports ARM builds using linker feedback with RVCT via the
".linkerfeedback" variant and, from clean, it is a two stage process at its
simplest e.g. :

    sbs -c armv5.linkerfeedback
    sbs -c armv5.linkerfeedback

The first build sees a "normal" compile and link, with the exceptions that:

i) a .fdb linker feedback file is generated into the build tree by the linker
ii) the object files generated by compilation are deleted post-link

The second build is also a normal compile and link (re-compilation enforced
by the explicit removal of object files in the first build) but this time
with the exceptions that:

i) the pre-existing .fdb file is referenced in compiler calls
ii) a "candidiate" .fdb file is generated by the linker and if (and only if)
    this differs from the pre-existing .fdb file then it replaces it and the
    existing object files are deleted

Any further ".linkerfeedback" builds operate as above i.e. if the linker
generates a candidate .fdb file different to that currently in use, the
component's object files are removed to enforce later re-compilation that then
makes use of the new .fdb file.

Note that, with builds from clean where no .fdb file exists, Raptor provides
info output into the log to indicate that are further build is required to
make use of the linker feedback file in later compilation:

    <info>Linker feedback file not present but will be generated by this build
        - compiled objects will be cleaned post-link</info>
    <info>Re-build to use linker feedback file generated by this build in
        compilation</info>
